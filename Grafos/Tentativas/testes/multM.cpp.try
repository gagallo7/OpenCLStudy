#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>

#ifdef __APPLE__
#include <OpenCL/cl.h>
#else
#include <CL/cl.h>
#endif

#if !defined(CL_CALLBACK)
#define CL_CALLBACK
#endif

// Constantes
// Matrizes A, B e C
// Tamanhos:
// A: l x m
// B: m x n
// C: l x n --- C = A x B
const unsigned int l = 8;
const unsigned int m = 8;
const unsigned int n = 8;

using namespace std;

//cl_uint A[l][m];
vector < vector < cl_uint > > A(l);
vector < vector < cl_uint > > B(l);
vector < vector < cl_uint > > C(l);

// Checagem de erros
inline void checkErr(cl_int err, const char *name) {
	if(err!=CL_SUCCESS) {
		std::cerr << "ERRO: " << name << " (" << err << ")" << std::endl;
		exit(EXIT_FAILURE);
	}
}

void CL_CALLBACK contextCallback (
		const char *errInfo,
		const void *private_info,
		size_t cb,
		void *user_data			) {
	std::cout << "Ocorreu um erro durante o uso do context: " << errInfo << std::endl;
	// Ignorando limpeza de memória e saindo diretamente
	exit(1);
}

int main(int argc, char *argv[]) {
	cl_int errNum;
	cl_uint nPlataformas;
	cl_uint nDispositivos;
	cl_platform_id *listaPlataformaID;
	cl_device_id *listaDispositivoID;
	cl_context contexto = NULL;
	cl_command_queue fila;
	cl_program programa;
	cl_kernel kernel;
	cl_mem Abuffer;
	cl_mem Bbuffer;
	cl_mem Cbuffer;

	// Preenchendo as matrizes
for (int i=0;i<l;i++) {
//	for (int j=0;j<l;j++) {
	A[i].resize(m);
}
for (int i=0;i<m;i++) {
	B[i].resize(n);
}
for (int i=0;i<l;i++) {
	C[i].resize(n);
}

	for ( int x = 0; x < l ; x ++ ) {
		for (int y = 0; y < m ; y ++ ) {
			A[x][y] = x + y*2;
		}
	}

	for ( int x = 0; x < m ; x ++ ) {
		for (int y = 0; y < n ; y ++ ) {
			B[x][y] = 3*x + y;
			B[x][y] |= 1;
		}
	}
	///// Selecionando uma plataforma OpenCL para rodar

	// Atribuindo a nPlataformas o número de plataformas disponíveis
	errNum = clGetPlatformIDs(0, NULL, &nPlataformas);
	checkErr( (errNum != CL_SUCCESS) ? errNum : 
			(nPlataformas <= 0 ? -1 : CL_SUCCESS),
			"clGetPlataformsIDs");
	// Se não houve erro, alocar memória para cl_platform_id
	listaPlataformaID = (cl_platform_id *)alloca(sizeof(cl_platform_id)*nPlataformas);
	// Atribuindo uma plataforma ao listaPlataformaID
	errNum = clGetPlatformIDs(nPlataformas, listaPlataformaID, NULL);
	checkErr(
			(errNum != CL_SUCCESS) ? errNum :
			(nPlataformas <= 0 ? -1 : CL_SUCCESS),
			"clGetPlatformIDs");

	// Iterando na lista de plataformas até achar uma que suporta um dispositivo de CPU. Se isso não ocorrer, acusar erro.
	cl_uint i;
	for (i=0; i < nPlataformas; i++) {
		// Atribuindo o número de dispositivos de CPU a nDispositivos
		errNum = clGetDeviceIDs (	listaPlataformaID[i],
				CL_DEVICE_TYPE_CPU,
				0,
				NULL,
				&nDispositivos		);
		if (errNum != CL_SUCCESS && errNum != CL_DEVICE_NOT_FOUND) {
			checkErr (errNum, "clGetDeviceIDs");
		}
		// Conferindo se há dispositivos de CPU
		else if (nDispositivos > 0) {
			// Atribuindo um dispositivo a uma listaDispositivoID
			listaDispositivoID = (cl_device_id *)alloca(sizeof(cl_device_id)*nDispositivos);

			errNum = clGetDeviceIDs (	
					listaPlataformaID[i],
					CL_DEVICE_TYPE_CPU,
					nDispositivos,
					&listaDispositivoID[0],
					NULL);
			checkErr(errNum, "clGetPlatformIDs");
			break;
		}
	}

	// Crindo um contexto no dispositivo/plataforma selecionada
	cl_context_properties propContexto[] = {
		CL_CONTEXT_PLATFORM,
		(cl_context_properties)listaPlataformaID[i],
		0
	};

	contexto = clCreateContext(
			propContexto,
			nDispositivos,
			listaDispositivoID,
			&contextCallback,
			NULL,
			&errNum			);

	checkErr(errNum, "clCreateContext");

	// Carregando o arquivo-fonte cl para póstuma compilação feita em runtime
	std::ifstream srcFile("mMatrix.cl");

	// Conferindo se ele foi aberto
	checkErr(srcFile.is_open() ? CL_SUCCESS : -1, "lendo mMatrix.cl");

	std::string srcProg (
			std::istreambuf_iterator<char>(srcFile),
			(std::istreambuf_iterator<char>()));

	const char *fonte = srcProg.c_str();
	size_t tamanho = srcProg.length();

	// Criando programa da fonte
	programa = clCreateProgramWithSource (
			contexto,
			1,
			&fonte,
			&tamanho,
			&errNum);
	checkErr(errNum, "clCreateProgramWithSource");

	// Compilando programa
	errNum = clBuildProgram (
			programa,
			nDispositivos,
			listaDispositivoID,
			NULL,
			NULL,
			NULL);

	if (errNum != CL_SUCCESS) { 		// Verificando se houve erro
		// Determinando o motivo do erro
		char logCompilacao[16384];
		clGetProgramBuildInfo (
				programa,
				listaDispositivoID[0],
				CL_PROGRAM_BUILD_LOG,
				sizeof(logCompilacao),
				logCompilacao,
				NULL);

		std::cerr << "Erro no kernel: " << std::endl;

		std::cerr << logCompilacao;
		checkErr(errNum, "clBuildProgram");
	}

	// Criando o objeto do Kernel
	kernel = clCreateKernel (
			programa,
			"multiplyMatrix",
			&errNum);
	checkErr(errNum, "clCreateKernel");

	// Alocando Buffers
	Abuffer = clCreateBuffer (
			contexto,
			CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
			sizeof(cl_uint)*l*m,
			(&A),
			&errNum);
	checkErr(errNum, "clCreateBuffer(A)");

	Bbuffer = clCreateBuffer (
			contexto,
			CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
			sizeof(cl_uint)*m*n,
			(&B),
			&errNum);
	checkErr(errNum, "clCreateBuffer(B)");

	Cbuffer = clCreateBuffer (
			contexto,
			CL_MEM_WRITE_ONLY,
			sizeof(cl_uint)*l*n,
			NULL,
			&errNum);
	checkErr(errNum, "clCreateBuffer(C)");

	// Escolhendo o primeiro dispositivo e criando a fila de comando
	fila = clCreateCommandQueue (
			contexto, 
			listaDispositivoID[0],
			0,
			&errNum);
	checkErr(errNum, "clCreateCommandQueue");

	// Setando os argumentos da função do Kernel
	errNum = clSetKernelArg(kernel, 0, sizeof(cl_mem), &Abuffer);
	errNum |= clSetKernelArg(kernel, 1, sizeof(cl_mem), &Bbuffer);
	errNum |= clSetKernelArg(kernel, 2, sizeof(cl_mem), &Cbuffer);
	errNum |= clSetKernelArg(kernel, 3, sizeof(cl_uint), &l);
	errNum |= clSetKernelArg(kernel, 4, sizeof(cl_uint), &m);
	errNum |= clSetKernelArg(kernel, 5, sizeof(cl_uint), &n);
	checkErr(errNum, "clSetKernelArg");

	// Definindo o número de work-items globais e locais
	const size_t globalWorkSize[2] = { l, n };
	const size_t localWorkSize[2] = { 8, 8 };

	// Enfileirando o Kernel para execução através da matriz
	errNum = clEnqueueNDRangeKernel (
			fila,
			kernel,
			2,
			NULL,
			globalWorkSize,
			localWorkSize,
			0,
			NULL,
			NULL);
	checkErr(errNum, "clEnqueueNDRangeKernel");

	errNum = clEnqueueReadBuffer (
			fila,
			Cbuffer,
			CL_TRUE,
			0,
			sizeof(cl_uint)*l*n,
			&C,
			0,
			NULL,
			NULL);
	checkErr(errNum, "clEnqueueReadBuffer");

	// Imprimindo saída do resultado
	for(int x = 0; x < l; x++) {
		for( int y=0; y<m; y++) {
			std::cout << A[x][y] << " ";
		}
		std::cout << std::endl;
	}
	std::cout << std::endl;
	for(int x = 0; x < m; x++) {
		for( int y=0; y<n; y++) {
			std::cout << B[x][y] << " ";
		}
		std::cout << std::endl;
	}
	std::cout << std::endl;
	for(int x = 0; x < l; x++) {
		for( int y=0; y<n; y++) {
			std::cout << C[x][y] << " ";
		}
		std::cout << std::endl;
	}

	std::cout << std::endl;

	return 0;
}
