!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASM_SRCS	../../demo/watershedNew/Debug/sources.mk	/^ASM_SRCS := $/;"	m
Accuracy	../../src/opf.c	/^float Accuracy(Subgraph *sg)$/;"	f
AddFrame	../../src/image.c	/^Image *AddFrame(Image *img, int sz, int value)$/;"	f
AddValue	../../demo/watergray/watergray.c	/^Image *AddValue(Image *img, int H)$/;"	f
AdjPixels	../../src/adjacency.c	/^AdjPxl *AdjPixels(Image *img, AdjRel *A)$/;"	f
AdjPxl	../../include/adjacency.h	/^} AdjPxl;$/;"	t	typeref:struct:_adjpxl
AdjRel	../../include/adjacency.h	/^} AdjRel;$/;"	t	typeref:struct:_adjrel
AdjRel2Image	../../src/adjacency.c	/^Image  *AdjRel2Image(AdjRel *A){$/;"	f
AllocCharArray	../../src/common.c	/^char *AllocCharArray(int n)$/;"	f
AllocDoubleArray	../../src/common.c	/^double *AllocDoubleArray(int n)$/;"	f
AllocFloatArray	../../src/common.c	/^float *AllocFloatArray(int n)$/;"	f
AllocIntArray	../../src/common.c	/^int *AllocIntArray(int n)$/;"	f
AllocRealArray	../../src/common.c	/^real  *AllocRealArray(int n){$/;"	f
AllocUCharArray	../../src/common.c	/^uchar *AllocUCharArray(int n)$/;"	f
AllocUIntArray	../../src/common.c	/^uint *AllocUIntArray(int n)$/;"	f
AllocUShortArray	../../src/common.c	/^ushort *AllocUShortArray(int n)$/;"	f
BIN	../../Makefile	/^BIN=.\/bin$/;"	m
BIN	../../demo/diffwatershed/Makefile	/^BIN=.$/;"	m
BIN	../../demo/eucldist/Makefile	/^BIN=.$/;"	m
BIN	../../demo/watergray/Makefile	/^BIN=.$/;"	m
BIN	../../demo/watershed/Makefile	/^BIN=.$/;"	m
BIN	../../demo/watershedNew/Makefile	/^BIN=.$/;"	m
BLACK	../../include/common.h	60;"	d
BMap	../../include/set.h	/^} BMap;$/;"	t	typeref:struct:_bmap
BMapCopy	../../src/set.c	/^void   BMapCopy(BMap *dest, BMap *src) {$/;"	f
BMapDestroy	../../src/set.c	/^void   BMapDestroy(BMap *b) {$/;"	f
BMapFill	../../src/set.c	/^void   BMapFill(BMap *b, int value) {$/;"	f
BMapGet	../../src/set.c	/^int    BMapGet(BMap *b, int n) {$/;"	f
BMapNew	../../src/set.c	/^BMap * BMapNew(int n) {$/;"	f
BMapSet	../../src/set.c	/^void BMapSet(BMap *b, int n, int value) {$/;"	f
BMapToggle	../../src/set.c	/^void   BMapToggle(BMap *b, int n) {$/;"	f
BOTH	../../include/common.h	57;"	d
Box	../../src/adjacency.c	/^AdjRel *Box(int ncols, int nrows)$/;"	f
C	../../include/cimage.h	/^  Image *C[3];$/;"	m	struct:cimage
C	../../include/gqueue.h	/^  GCircularQueue C;$/;"	m	struct:_gqueue
CC_DEPS	../../demo/watershedNew/Debug/sources.mk	/^CC_DEPS := $/;"	m
CC_SRCS	../../demo/watershedNew/Debug/sources.mk	/^CC_SRCS := $/;"	m
CImage	../../include/cimage.h	/^} CImage;$/;"	t	typeref:struct:cimage
CL_CALLBACK	../../demo/watershed/kernels/dijk.cpp	17;"	d	file:
CL_CALLBACK	../../include/oclFunctions.h	8;"	d
CPP_DEPS	../../demo/watershedNew/Debug/sources.mk	/^CPP_DEPS := $/;"	m
CPP_SRCS	../../demo/watershedNew/Debug/sources.mk	/^CPP_SRCS := $/;"	m
CTime	../../src/comptime.c	/^float CTime(timer *tic, timer *toc) \/* It computes the time difference *\/$/;"	f
CU_DEPS	../../demo/watershedNew/Debug/sources.mk	/^CU_DEPS := $/;"	m
CU_SRCS	../../demo/watershedNew/Debug/sources.mk	/^CU_SRCS := $/;"	m
CXX_DEPS	../../demo/watershedNew/Debug/sources.mk	/^CXX_DEPS := $/;"	m
CXX_SRCS	../../demo/watershedNew/Debug/sources.mk	/^CXX_SRCS := $/;"	m
C_DEPS	../../demo/watershedNew/Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	../../demo/watershedNew/Debug/sources.mk	/^C_SRCS := $/;"	m
C_UPPER_DEPS	../../demo/watershedNew/Debug/sources.mk	/^C_UPPER_DEPS := $/;"	m
C_UPPER_SRCS	../../demo/watershedNew/Debug/sources.mk	/^C_UPPER_SRCS := $/;"	m
Change	../../src/common.c	/^void Change(int *a, int *b){ \/* It changes content between a and b *\/$/;"	f
Circular	../../src/adjacency.c	/^AdjRel *Circular(float r)$/;"	f
CloneAdjRel	../../src/adjacency.c	/^AdjRel *CloneAdjRel(AdjRel *A){$/;"	f
CloneSet	../../src/set.c	/^Set *CloneSet(Set *S){$/;"	f
Close	../../src/morphology.c	/^Image *Close(Image *img, AdjRel *A)$/;"	f
CloseBasins	../../src/morphology.c	/^Image *CloseBasins(Image *img)$/;"	f
CloseHoles	../../src/morphology.c	/^Image *CloseHoles(Image *img)$/;"	f
CloseRec	../../src/morphology.c	/^Image *CloseRec(Image *I, AdjRel *A)$/;"	f
ComplAdj	../../src/adjacency.c	/^AdjRel *ComplAdj(AdjRel *A1, AdjRel *A2)$/;"	f
Convert2DisjointSets	../../src/set.c	/^void    Convert2DisjointSets(Set **S1,$/;"	f
ConvertDImage2Image	../../src/dimage.c	/^Image *ConvertDImage2Image(DImage *dimg){$/;"	f
CopyDImage	../../src/dimage.c	/^DImage *CopyDImage(DImage *dimg)$/;"	f
CopyFeatures	../../src/feature.c	/^Features* CopyFeatures(Features* feat)$/;"	f
CopyImage	../../src/image.c	/^Image  *CopyImage(Image *img)$/;"	f
CopySNode	../../src/subgraph.c	/^void CopySNode(SNode *dest, SNode *src, int nfeats){$/;"	f
CopySubgraph	../../src/subgraph.c	/^Subgraph *CopySubgraph(Subgraph *g){$/;"	f
CreateAdjRel	../../src/adjacency.c	/^AdjRel *CreateAdjRel(int n)$/;"	f
CreateCImage	../../src/cimage.c	/^CImage *CreateCImage(int ncols, int nrows)$/;"	f
CreateDImage	../../src/dimage.c	/^DImage *CreateDImage(int ncols, int nrows)$/;"	f
CreateFeatures	../../src/feature.c	/^Features* CreateFeatures(int ncols, int nrows, int nfeats)$/;"	f
CreateForest	../../demo/eucldist/eucldist.c	/^Forest *CreateForest(int ncols, int nrows)$/;"	f
CreateForest	../../demo/eucldist/serialEucldist.c	/^Forest *CreateForest(int ncols, int nrows)$/;"	f
CreateGQueue	../../src/gqueue.c	/^GQueue *CreateGQueue(int nbuckets, int nelems, int *value)$/;"	f
CreateImage	../../src/image.c	/^Image *CreateImage(int ncols, int nrows)$/;"	f
CreateImageForest	../../demo/diffwatershed/diffwatershed.c	/^ImageForest *CreateImageForest(Image *img)$/;"	f
CreateRealHeap	../../src/realheap.c	/^RealHeap *CreateRealHeap(int n, float *cost) {$/;"	f
CreateSubgraph	../../src/subgraph.c	/^Subgraph *CreateSubgraph(int nnodes)$/;"	f
Cross	../../src/adjacency.c	/^AdjRel *Cross(int ncols, int nrows)$/;"	f
DECREASING	../../include/common.h	63;"	d
DEMO	../../Makefile	/^DEMO=.\/demo$/;"	m
DEVICE	../../demo/eucldist/eucldist.c	28;"	d	file:
DEVICE	../../demo/watershedNew/watershed.c	28;"	d	file:
DImage	../../include/dimage.h	/^} DImage;$/;"	t	typeref:struct:_DImage
DImageThreshold	../../src/dimage.c	/^Image *DImageThreshold(DImage *img, double lower, double higher)$/;"	f
DestroyAdjPxl	../../src/adjacency.c	/^void DestroyAdjPxl(AdjPxl **N)$/;"	f
DestroyAdjRel	../../src/adjacency.c	/^void DestroyAdjRel(AdjRel **A)$/;"	f
DestroyCImage	../../src/cimage.c	/^void    DestroyCImage(CImage **cimg)$/;"	f
DestroyDImage	../../src/dimage.c	/^void DestroyDImage(DImage **dimg)$/;"	f
DestroyFeatures	../../src/feature.c	/^void DestroyFeatures(Features **f)$/;"	f
DestroyForest	../../demo/eucldist/eucldist.c	/^void DestroyForest(Forest **F)$/;"	f
DestroyForest	../../demo/eucldist/serialEucldist.c	/^void DestroyForest(Forest **F)$/;"	f
DestroyGQueue	../../src/gqueue.c	/^void DestroyGQueue(GQueue **Q)$/;"	f
DestroyImage	../../src/image.c	/^void DestroyImage(Image **img)$/;"	f
DestroyImageForest	../../demo/diffwatershed/diffwatershed.c	/^void DestroyImageForest(ImageForest **fst)$/;"	f
DestroyRealHeap	../../src/realheap.c	/^void DestroyRealHeap(RealHeap **H) {$/;"	f
DestroySet	../../src/set.c	/^void DestroySet(Set **S)$/;"	f
DestroySubgraph	../../src/subgraph.c	/^void DestroySubgraph(Subgraph **sg)$/;"	f
DiffWatershed	../../demo/diffwatershed/diffwatershed.c	/^void DiffWatershed(Image *grad, ImageForest *fst, Set *Obj, Set *Bkg, Set *Rm)$/;"	f
Dilate	../../src/morphology.c	/^Image *Dilate(Image *img, AdjRel *A)$/;"	f
DistTrans	../../demo/eucldist/eucldist.c	/^Forest *DistTrans(Image *I)$/;"	f
DistTrans	../../demo/eucldist/serialEucldist.c	/^Forest *DistTrans(Image *I)$/;"	f
DrawLabeledRegions	../../src/cimage.c	/^CImage *DrawLabeledRegions(Image *img, Image *label){$/;"	f
EXECUTABLES	../../demo/watershedNew/Debug/sources.mk	/^EXECUTABLES := $/;"	m
EXTERIOR	../../include/common.h	56;"	d
EmptyGQueue	../../src/gqueue.c	/^int EmptyGQueue(GQueue *Q)$/;"	f
Epsilon	../../include/common.h	64;"	d
Erode	../../src/morphology.c	/^Image *Erode(Image *img, AdjRel *A)$/;"	f
Error	../../src/common.c	/^void Error(char *msg,char *func){ \/* It prints error message and exits$/;"	f
EuclDist	../../src/opf.c	/^float EuclDist(float *f1, float *f2, int n)$/;"	f
EuclDistLog	../../src/opf.c	/^float EuclDistLog(float *f1, float *f2, int n)$/;"	f
FChange	../../src/common.c	/^void FChange(float *a, float *b){ \/* It changes content between floats a and b *\/$/;"	f
FElem	../../include/feature.h	/^} FElem;$/;"	t	typeref:struct:_felem
FIFOBREAK	../../include/gqueue.h	8;"	d
FLAGS	../../Makefile	/^FLAGS= -O3 -Wall$/;"	m
FLAGS	../../demo/diffwatershed/Makefile	/^FLAGS= -O3 -Wall$/;"	m
FLAGS	../../demo/eucldist/Makefile	/^FLAGS= -g -Wall $/;"	m
FLAGS	../../demo/watergray/Makefile	/^FLAGS= -O3 -Wall$/;"	m
FLAGS	../../demo/watershed/Makefile	/^FLAGS= -O3 -Wall$/;"	m
FLAGS	../../demo/watershedNew/Makefile	/^FLAGS= -g -Wall $/;"	m
FastCircular	../../src/adjacency.c	/^AdjRel *FastCircular(float r){$/;"	f
FastClose	../../src/morphology.c	/^Image *FastClose(Image *I, float radius)$/;"	f
FastCloseRec	../../src/morphology.c	/^Image *FastCloseRec(Image *I, float radius)$/;"	f
FastDilate	../../src/morphology.c	/^Image *FastDilate(Image *I,Set **S, float radius)$/;"	f
FastErode	../../src/morphology.c	/^Image *FastErode(Image *I,Set **S, float radius)$/;"	f
FastOpen	../../src/morphology.c	/^Image *FastOpen(Image *I, float radius)$/;"	f
FastOpenRec	../../src/morphology.c	/^Image *FastOpenRec(Image *I, float radius)$/;"	f
Features	../../include/feature.h	/^} Features;$/;"	t	typeref:struct:_features
Forest	../../demo/eucldist/eucldist.c	/^} Forest;$/;"	t	typeref:struct:_forest	file:
Forest	../../demo/eucldist/serialEucldist.c	/^} Forest;$/;"	t	typeref:struct:_forest	file:
ForestRemoval	../../demo/diffwatershed/diffwatershed.c	/^Set *ForestRemoval(ImageForest *fst, Set *Rm, AdjRel *A)$/;"	f
FrameSize	../../src/adjacency.c	/^int FrameSize(AdjRel *A)$/;"	f
GCircularQueue	../../include/gqueue.h	/^} GCircularQueue;$/;"	t	typeref:struct:_gcircularqueue
GDoublyLinkedLists	../../include/gqueue.h	/^} GDoublyLinkedLists; $/;"	t	typeref:struct:_gdoublylinkedlists
GQNode	../../include/gqueue.h	/^} GQNode;$/;"	t	typeref:struct:_gqnode
GQueue	../../include/gqueue.h	/^} GQueue;$/;"	t	typeref:struct:_gqueue
GRAY	../../include/common.h	59;"	d
GaussCImageFeats	../../src/feature.c	/^Features *GaussCImageFeats(CImage *cimg, int nscales)$/;"	f
GaussImageFeats	../../src/feature.c	/^Features *GaussImageFeats(Image *img, int nscales)$/;"	f
GetSetSize	../../src/set.c	/^int  GetSetSize(Set *S){$/;"	f
GoDownRealHeap	../../src/realheap.c	/^void GoDownRealHeap(RealHeap *H, int i) {$/;"	f
GoUpRealHeap	../../src/realheap.c	/^void GoUpRealHeap(RealHeap *H, int i) {$/;"	f
GrowGQueue	../../src/gqueue.c	/^GQueue *GrowGQueue(GQueue **Q, int nbuckets)$/;"	f
HEAP_DAD	../../include/realheap.h	8;"	d
HEAP_LEFTSON	../../include/realheap.h	9;"	d
HEAP_RIGHTSON	../../include/realheap.h	10;"	d
Horizontal	../../src/adjacency.c	/^AdjRel *Horizontal(int r)$/;"	f
INC	../../demo/diffwatershed/Makefile	/^INC=..\/..\/include$/;"	m
INC	../../demo/eucldist/Makefile	/^INC=..\/..\/include -I\/usr\/include\/nvidia-current$/;"	m
INC	../../demo/watergray/Makefile	/^INC=..\/..\/include$/;"	m
INC	../../demo/watershed/Makefile	/^INC=..\/..\/include$/;"	m
INC	../../demo/watershedNew/Makefile	/^INC=..\/..\/include$/;"	m
INCLUDE	../../Makefile	/^INCLUDE=.\/include$/;"	m
INCLUDES	../../Makefile	/^INCLUDES=-I$(INCLUDE)$/;"	m
INCLUDES	../../demo/diffwatershed/Makefile	/^INCLUDES= -I$(INC) -I$(OPF_DIR)\/include$/;"	m
INCLUDES	../../demo/eucldist/Makefile	/^INCLUDES= -I$(INC) -I$(OPF_DIR)\/include$/;"	m
INCLUDES	../../demo/watergray/Makefile	/^INCLUDES= -I$(INC) -I$(OPF_DIR)\/include$/;"	m
INCLUDES	../../demo/watershed/Makefile	/^INCLUDES= -I$(INC) -I$(OPF_DIR)\/include$/;"	m
INCLUDES	../../demo/watershedNew/Makefile	/^INCLUDES= -I$(INC) -I$(OPF_DIR)\/include$/;"	m
INCREASING	../../include/common.h	62;"	d
INC_DIRS	../../demo/eucldist/Makefile	/^	INC_DIRS=. $(AMDAPPSDKROOT)\/include$/;"	m
INF	../../demo/watershed/kernels/dijk.cpp	20;"	d	file:
INF	../../include/oclFunctions.h	13;"	d
INTERIOR	../../include/common.h	55;"	d
Image	../../include/image.h	/^} Image;$/;"	t	typeref:struct:_image
ImageBorder	../../src/morphology.c	/^Set *ImageBorder(Image *img)$/;"	f
ImageForest	../../demo/diffwatershed/diffwatershed.c	/^} ImageForest;$/;"	t	typeref:struct:_ImageForest	file:
Imax	../../include/feature.h	/^  int  Imax;$/;"	m	struct:_features
Imax	../../include/subgraph.h	/^  int   Imax;    \/\/ Maximum image value;$/;"	m	struct:_subgraph
InfRec	../../src/morphology.c	/^Image *InfRec(Image *img, Image *marker)$/;"	f
InfRecMI	../../src/morphology.c	/^Image *InfRecMI(Image *img, Set **S)$/;"	f
InsertGQueue	../../src/gqueue.c	/^void InsertGQueue(GQueue **Q, int elem)$/;"	f
InsertRealHeap	../../src/realheap.c	/^char InsertRealHeap(RealHeap *H, int pixel) {$/;"	f
InsertSet	../../src/set.c	/^void InsertSet(Set **S, int elem)$/;"	f
IntSet	../../include/set.h	/^} IntSet;$/;"	t	typeref:struct:_intset
IntSetAddUniqueElementToSet	../../src/set.c	/^void IntSetAddUniqueElementToSet(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetBelongs	../../src/set.c	/^int  IntSetBelongs(IntSet *S, int elem) {$/;"	f
IntSetDestroy	../../src/set.c	/^void IntSetDestroy(IntSet *S) {$/;"	f
IntSetEmpty	../../src/set.c	/^int IntSetEmpty(IntSet *S) {$/;"	f
IntSetGetElemProp	../../src/set.c	/^int  IntSetGetElemProp(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetGrow	../../src/set.c	/^void IntSetGrow(IntSet *S) {$/;"	f
IntSetIntersection	../../src/set.c	/^void IntSetIntersection(IntSet *S, IntSet *T) {$/;"	f
IntSetMinus	../../src/set.c	/^void IntSetMinus(IntSet *S, IntSet *T) {$/;"	f
IntSetNew	../../src/set.c	/^IntSet * IntSetNew(int N, int propsize) {$/;"	f
IntSetNewCopy	../../src/set.c	/^IntSet * IntSetNewCopy(IntSet *S) {$/;"	f
IntSetR1	../../src/set.c	/^void IntSetR1(IntSet *S, int index) {$/;"	f
IntSetRemoveAll	../../src/set.c	/^void IntSetRemoveAll(IntSet *S) {$/;"	f
IntSetRemoveAny	../../src/set.c	/^int IntSetRemoveAny(IntSet *S, void *elemprop) {$/;"	f
IntSetRemoveElement	../../src/set.c	/^void IntSetRemoveElement(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetSetElemProp	../../src/set.c	/^int IntSetSetElemProp(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetShrink	../../src/set.c	/^void IntSetShrink(IntSet *S) {$/;"	f
IntSetUnion	../../src/set.c	/^void IntSetUnion(IntSet *S, IntSet *T) {$/;"	f
IntSetUnion1	../../src/set.c	/^void IntSetUnion1(IntSet *S, int elem, void *elemprop) {$/;"	f
IsEmptyRealHeap	../../src/realheap.c	/^char IsEmptyRealHeap(RealHeap *H) {$/;"	f
IsFullRealHeap	../../src/realheap.c	/^char IsFullRealHeap(RealHeap *H) {$/;"	f
IsInSet	../../src/set.c	/^bool IsInSet(Set *S, int elem){$/;"	f
IsPowerOf2	../../src/common.c	/^int IsPowerOf2(int x)$/;"	f
K	../../include/subgraph.h	/^  float K;  \/\/ Constant for PDF computation$/;"	m	struct:_subgraph
KAdjacency	../../src/adjacency.c	/^AdjRel *KAdjacency()$/;"	f
L	../../include/gqueue.h	/^  GDoublyLinkedLists L;$/;"	m	struct:_gqueue
LIB	../../Makefile	/^LIB=.\/lib$/;"	m
LIB	../../demo/diffwatershed/Makefile	/^LIB=..\/..\/lib$/;"	m
LIB	../../demo/eucldist/Makefile	/^LIB=..\/..\/lib -L\/usr\/lib\/nvidia-current -lOpenCL$/;"	m
LIB	../../demo/watergray/Makefile	/^LIB=..\/..\/lib$/;"	m
LIB	../../demo/watershed/Makefile	/^LIB=..\/..\/lib$/;"	m
LIB	../../demo/watershedNew/Makefile	/^LIB=..\/..\/lib$/;"	m
LIBS	../../demo/eucldist/Makefile	/^LIBS=-lOpenCL$/;"	m
LIBS	../../demo/watershedNew/Debug/objects.mk	/^LIBS := -lift -lOpenCL -lm$/;"	m
LIB_DIRS	../../demo/eucldist/Makefile	/^		LIB_DIRS=$(AMDAPPSDKROOT)\/lib\/x86$/;"	m
LIB_DIRS	../../demo/eucldist/Makefile	/^		LIB_DIRS=$(AMDAPPSDKROOT)\/lib\/x86_64$/;"	m
LIFOBREAK	../../include/gqueue.h	9;"	d
Lab2RGB	../../src/color.c	/^void Lab2RGB(float* l, float* a, float* b)$/;"	f
LabFeats	../../src/feature.c	/^Features* LabFeats(Features* rgb)$/;"	f
LeftSide	../../src/adjacency.c	/^AdjRel *LeftSide(AdjRel *A)$/;"	f
LeftSide2	../../src/adjacency.c	/^AdjRel *LeftSide2(AdjRel *A, float r)$/;"	f
MAX	../../include/common.h	69;"	d
MAXARCW	../../include/opf.h	9;"	d
MAXVALUE	../../include/gqueue.h	7;"	d
MAX_SOURCE_SIZE	../../include/oclFunctions.h	14;"	d
MIN	../../include/common.h	73;"	d
MINVALUE	../../include/gqueue.h	6;"	d
MSG1	../../include/common.h	16;"	d
MSG2	../../include/common.h	17;"	d
MSG3	../../include/common.h	18;"	d
MSTPrototypes	../../src/opf.c	/^void MSTPrototypes(Subgraph *sg)$/;"	f
MaximumDImageValue	../../src/dimage.c	/^double  MaximumDImageValue(DImage *dimg)$/;"	f
MaximumSetValue	../../src/set.c	/^int     MaximumSetValue(Set *S){$/;"	f
MaximumValue	../../src/image.c	/^int MaximumValue(Image *img)$/;"	f
MergeSets	../../src/set.c	/^void MergeSets(Set **S, Set **T) {$/;"	f
MinimumDImageValue	../../src/dimage.c	/^double  MinimumDImageValue(DImage *dimg)$/;"	f
MinimumSetValue	../../src/set.c	/^int     MinimumSetValue(Set *S){$/;"	f
MinimumValue	../../src/image.c	/^int MinimumValue(Image *img)$/;"	f
N	../../include/set.h	/^  int N, VN;$/;"	m	struct:_bmap
NCFgets	../../src/common.c	/^int NCFgets(char *s, int m, FILE *f) {$/;"	f
NIL	../../include/common.h	61;"	d
NLOOP	../../demo/eucldist/eucldist.c	29;"	d	file:
NLOOP	../../demo/watershed/watershed.c	31;"	d	file:
NLOOP	../../demo/watershedNew/watershed.c	29;"	d	file:
OBJ	../../Makefile	/^OBJ=.\/obj$/;"	m
OBJS	../../demo/watershedNew/Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	../../demo/watershedNew/Debug/sources.mk	/^OBJ_SRCS := $/;"	m
OPFClassify	../../src/opf.c	/^void OPFClassify(Subgraph *sgtrain, Subgraph *sg)$/;"	f
OPFClassifyImage	../../src/opf.c	/^Image* OPFClassifyImage(Subgraph *sgtrain, Features* feat)$/;"	f
OPFLearning	../../src/opf.c	/^void OPFLearning(Subgraph **sgtrain, Subgraph **sgeval)$/;"	f
OPFTraining	../../src/opf.c	/^void OPFTraining(Subgraph *sg)$/;"	f
OPF_BKG_LABEL	../../include/opf.h	16;"	d
OPF_OBJ_LABEL	../../include/opf.h	15;"	d
O_SRCS	../../demo/watershedNew/Debug/sources.mk	/^O_SRCS := $/;"	m
Open	../../src/morphology.c	/^Image *Open(Image *img, AdjRel *A)$/;"	f
OpenDomes	../../src/morphology.c	/^Image *OpenDomes(Image *img)$/;"	f
OpenRec	../../src/morphology.c	/^Image *OpenRec(Image *I, AdjRel *A)$/;"	f
P	../../demo/eucldist/eucldist.c	/^    Image *P; \/\/ predecessor map$/;"	m	struct:_forest	file:
P	../../demo/eucldist/serialEucldist.c	/^  Image *P; \/\/ predecessor map$/;"	m	struct:_forest	file:
PI	../../include/common.h	54;"	d
PROTOTYPE	../../include/opf.h	10;"	d
Pixel	../../include/image.h	/^} Pixel;$/;"	t	typeref:struct:_pixel
QSIZE	../../include/gqueue.h	10;"	d
R	../../demo/eucldist/eucldist.c	/^    Image *R; \/\/ root map$/;"	m	struct:_forest	file:
R	../../demo/eucldist/serialEucldist.c	/^  Image *R; \/\/ root map$/;"	m	struct:_forest	file:
REAL_MAX	../../include/common.h	48;"	d
REAL_MIN	../../include/common.h	49;"	d
RGB2Lab	../../src/color.c	/^void RGB2Lab(float* r, float* g, float * b)$/;"	f
RM	../../demo/watershedNew/Debug/makefile	/^RM := rm -rf$/;"	m
ROUND	../../include/common.h	76;"	d
RandomInteger	../../src/common.c	/^int RandomInteger (int low, int high){$/;"	f
ReadCImage	../../src/cimage.c	/^CImage *ReadCImage(char *filename)$/;"	f
ReadDImage	../../src/dimage.c	/^DImage  *ReadDImage(char *filename){$/;"	f
ReadImage	../../src/image.c	/^Image *ReadImage(char *filename)$/;"	f
ReadSeeds	../../src/seeds.c	/^void ReadSeeds(char *filename, Set **Obj, Set **Bkg)$/;"	f
ReadSubgraph	../../src/subgraph.c	/^Subgraph *ReadSubgraph(char *file){$/;"	f
RealHeap	../../include/realheap.h	/^} RealHeap;$/;"	t	typeref:struct:_realheap
RemFrame	../../src/image.c	/^Image *RemFrame(Image *fimg, int sz)$/;"	f
RemoveGQueue	../../src/gqueue.c	/^int RemoveGQueue(GQueue *Q)$/;"	f
RemoveGQueueElem	../../src/gqueue.c	/^void RemoveGQueueElem(GQueue *Q, int elem)$/;"	f
RemoveRealHeap	../../src/realheap.c	/^char RemoveRealHeap(RealHeap *H, int *pixel) {$/;"	f
RemoveSet	../../src/set.c	/^int RemoveSet(Set **S)$/;"	f
RemoveSetElem	../../src/set.c	/^void RemoveSetElem(Set **S, int elem){$/;"	f
ResetGQueue	../../src/gqueue.c	/^void ResetGQueue(GQueue *Q)$/;"	f
ResetRealHeap	../../src/realheap.c	/^void ResetRealHeap(RealHeap *H)$/;"	f
RightSide	../../src/adjacency.c	/^AdjRel *RightSide(AdjRel *A)$/;"	f
RightSide2	../../src/adjacency.c	/^AdjRel *RightSide2(AdjRel *A, float r)$/;"	f
Ring	../../src/adjacency.c	/^AdjRel *Ring(float inner_radius, float outer_radius)$/;"	f
SIGN	../../include/common.h	78;"	d
SNode	../../include/subgraph.h	/^} SNode;$/;"	t	typeref:struct:_snode
SPROP_PTR	../../include/set.h	94;"	d
SRC	../../Makefile	/^SRC=.\/src$/;"	m
SUBDIRS	../../demo/watershedNew/Debug/sources.mk	/^SUBDIRS := \\$/;"	m
S_UPPER_SRCS	../../demo/watershedNew/Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
SafeMod	../../src/common.c	/^int SafeMod(int a, int n)$/;"	f
Set	../../include/set.h	/^} Set;$/;"	t	typeref:struct:_set
SetDImage	../../src/dimage.c	/^void SetDImage(DImage *dimg, double value)$/;"	f
SetImage	../../src/image.c	/^void SetImage(Image *img, int value)$/;"	f
SetLabel	../../demo/watershed/watershed.c	/^cl_int SetLabel (cl_int* pred, cl_int* label, cl_int n, cl_int pos) {$/;"	f
SetLabelIterative	../../demo/watershed/watershed.c	/^void SetLabelIterative (cl_int* pred, cl_int* label, cl_int n) {$/;"	f
SetLabelIterative	../../demo/watershedNew/watershed.c	/^void SetLabelIterative (cl_int* pred, cl_int* label, cl_int n) {$/;"	f
SetRemovalPolicy	../../include/gqueue.h	13;"	d
SetRemovalPolicyRealHeap	../../src/realheap.c	/^void SetRemovalPolicyRealHeap(RealHeap *H, char policy){$/;"	f
SetSubgraphFeatures	../../src/opf.c	/^void SetSubgraphFeatures(Subgraph *sg, Features *f)$/;"	f
SetTieBreak	../../include/gqueue.h	12;"	d
ShearedBox	../../src/adjacency.c	/^AdjRel *ShearedBox(int xsize, int ysize, float Si, float Sj)$/;"	f
Sl	../../include/set.h	/^  int   *Sl;$/;"	m	struct:_intset
SplitSubgraph	../../src/opf.c	/^void SplitSubgraph(Subgraph *sg, Subgraph **sg1, Subgraph **sg2, float perc1)$/;"	f
SplitSubgraphByTrueLabel	../../src/opf.c	/^Subgraph* SplitSubgraphByTrueLabel(Subgraph* sg, int label)$/;"	f
Sprop	../../include/set.h	/^  void  *Sprop; \/* propriedades associadas a cada elemento *\/$/;"	m	struct:_intset
Subgraph	../../include/subgraph.h	/^} Subgraph;$/;"	t	typeref:struct:_subgraph
SubgraphFromSeeds	../../src/opf.c	/^Subgraph* SubgraphFromSeeds(Features* f, Set* Si, Set* Se)$/;"	f
SupRec	../../src/morphology.c	/^Image *SupRec(Image *img, Image *marker)$/;"	f
SupRecMI	../../src/morphology.c	/^Image *SupRecMI(Image *img, Set **S)$/;"	f
Sv	../../include/set.h	/^  BMap  *Sv;$/;"	m	struct:_intset
SwapErrorsbyNonPrototypes	../../src/opf.c	/^void SwapErrorsbyNonPrototypes(Subgraph **sgtrain, Subgraph **sgeval)$/;"	f
SwapSNode	../../src/subgraph.c	/^void SwapSNode(SNode *a, SNode *b){$/;"	f
TIMING_END	../../include/comptime.h	17;"	d
TIMING_SECTION	../../include/comptime.h	14;"	d
TIMING_START	../../include/comptime.h	10;"	d
Threshold	../../src/image.c	/^Image *Threshold(Image *img, int lower, int higher)$/;"	f
Tic	../../src/comptime.c	/^timer *Tic(){ \/* It marks the initial time *\/$/;"	f
Toc	../../src/comptime.c	/^timer *Toc(){ \/* It marks the final time *\/$/;"	f
USER_OBJS	../../demo/watershedNew/Debug/objects.mk	/^USER_OBJS :=$/;"	m
UpdateGQueue	../../src/gqueue.c	/^void UpdateGQueue(GQueue **Q, int elem, int newvalue)$/;"	f
UpdateRealHeap	../../src/realheap.c	/^void UpdateRealHeap(RealHeap *H, int p, float value){$/;"	f
V	../../demo/eucldist/eucldist.c	/^    Image *V; \/\/ distance (cost or connectivity) map$/;"	m	struct:_forest	file:
V	../../demo/eucldist/serialEucldist.c	/^  Image *V; \/\/ distance (cost or connectivity) map$/;"	m	struct:_forest	file:
VN	../../include/set.h	/^  int N, VN;$/;"	m	struct:_bmap
ValidDImagePixel	../../src/dimage.c	/^bool ValidDImagePixel(DImage *dimg, int x, int y)$/;"	f
ValidPixel	../../src/image.c	/^bool ValidPixel(Image *img, int x, int y)$/;"	f
Vertical	../../src/adjacency.c	/^AdjRel *Vertical(int r)$/;"	f
WHITE	../../include/common.h	58;"	d
Warning	../../src/common.c	/^void Warning(char *msg,char *func){ \/* It prints warning message and$/;"	f
WaterGray	../../demo/watergray/watergray.c	/^Image *WaterGray(Image *img, Image *marker, AdjRel *A)$/;"	f
Watershed	../../demo/watershed/watershed.c	/^Image *Watershed(Image *img, Set *Obj, Set *Bkg)$/;"	f
Watershed	../../demo/watershedNew/watershed.c	/^Image *Watershed(Image *img, Set *Obj, Set *Bkg)$/;"	f
WriteCImage	../../src/cimage.c	/^void    WriteCImage(CImage *cimg, char *filename)$/;"	f
WriteDImage	../../src/dimage.c	/^void    WriteDImage(DImage *dimg, char *filename){$/;"	f
WriteImage	../../src/image.c	/^void WriteImage(Image *img,char *filename)$/;"	f
WriteSubgraph	../../src/subgraph.c	/^void WriteSubgraph(Subgraph *g, char *file){$/;"	f
_ADJACENCY_H_	../../include/adjacency.h	2;"	d
_CIMAGE_H_	../../include/cimage.h	2;"	d
_COLOR_H_	../../include/color.h	2;"	d
_COMMON_H_	../../include/common.h	2;"	d
_CTIME_H_	../../include/comptime.h	2;"	d
_DIMAGE_H_	../../include/dimage.h	2;"	d
_DImage	../../include/dimage.h	/^typedef struct _DImage{$/;"	s
_FEATURE_H_	../../include/feature.h	2;"	d
_GQUEUE_H_	../../include/gqueue.h	2;"	d
_IFT_H_	../../include/ift.h	2;"	d
_IMAGE_H_	../../include/image.h	2;"	d
_ImageForest	../../demo/diffwatershed/diffwatershed.c	/^typedef struct _ImageForest {$/;"	s	file:
_MORPHOLOGY_H_	../../include/morphology.h	2;"	d
_OPF_H_	../../include/opf.h	2;"	d
_REALHEAP_H_	../../include/realheap.h	2;"	d
_SEEDS_H_	../../include/seeds.h	2;"	d
_SET_H_	../../include/set.h	2;"	d
_SUBGRAPH_H_	../../include/subgraph.h	2;"	d
_adjpxl	../../include/adjacency.h	/^typedef struct _adjpxl {$/;"	s
_adjrel	../../include/adjacency.h	/^typedef struct _adjrel {$/;"	s
_bmap	../../include/set.h	/^typedef struct _bmap {$/;"	s
_fast_BMapGet	../../include/set.h	45;"	d
_fast_BMapSet	../../include/set.h	46;"	d
_fast_BMapSet0	../../include/set.h	48;"	d
_fast_BMapSet1	../../include/set.h	49;"	d
_fast_BMapToggle	../../include/set.h	50;"	d
_fast_Belongs	../../src/set.c	437;"	d	file:
_features	../../include/feature.h	/^typedef struct _features {$/;"	s
_felem	../../include/feature.h	/^typedef struct _felem {$/;"	s
_forest	../../demo/eucldist/eucldist.c	/^typedef struct _forest {$/;"	s	file:
_forest	../../demo/eucldist/serialEucldist.c	/^typedef struct _forest {$/;"	s	file:
_gcircularqueue	../../include/gqueue.h	/^typedef struct _gcircularqueue { $/;"	s
_gdoublylinkedlists	../../include/gqueue.h	/^typedef struct _gdoublylinkedlists {$/;"	s
_gqnode	../../include/gqueue.h	/^typedef struct _gqnode { $/;"	s
_gqueue	../../include/gqueue.h	/^typedef struct _gqueue { \/* Priority queue by Dial implemented as$/;"	s
_image	../../include/image.h	/^typedef struct _image {$/;"	s
_intset	../../include/set.h	/^typedef struct _intset {$/;"	s
_pixel	../../include/image.h	/^typedef struct _pixel {$/;"	s
_realheap	../../include/realheap.h	/^typedef struct _realheap {$/;"	s
_set	../../include/set.h	/^typedef struct _set {$/;"	s
_snode	../../include/subgraph.h	/^typedef struct _snode {$/;"	s
_subgraph	../../include/subgraph.h	/^typedef struct _subgraph {$/;"	s
adj	../../include/subgraph.h	/^  Set  *adj;     \/\/ list of adjacent nodes$/;"	m	struct:_snode
ap_double	../../include/common.h	/^typedef double* ap_double;$/;"	t
ap_int	../../include/common.h	/^typedef int* ap_int;$/;"	t
arestas	../../demo/watershed/kernels/dijk.cpp	/^		vector < cl_uint > arestas; 		\/\/ Vetor de arestas$/;"	m	class:grafo	file:
bestk	../../include/subgraph.h	/^  int   bestk;   \/\/ number of adjacent nodes$/;"	m	struct:_subgraph
bmap_reset	../../src/set.c	/^static char bmap_reset[8] = { 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f };$/;"	v	file:
bmap_set	../../src/set.c	/^static char bmap_set[8]   = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };$/;"	v	file:
bool	../../include/common.h	/^typedef enum boolean {false,true} bool;$/;"	t	typeref:enum:boolean
boolean	../../include/common.h	/^typedef enum boolean {false,true} bool;$/;"	g
checkErr	../../demo/watershed/kernels/dijk.cpp	/^inline void checkErr(cl_int err, const char *name) {$/;"	f
checkErr	../../src/oclFunctions.c	/^inline void checkErr(cl_int err, const char *name) {$/;"	f
cimage	../../include/cimage.h	/^typedef struct cimage {$/;"	s
color	../../include/gqueue.h	/^  char color; \/* WHITE=0, GRAY=1, BLACK=2 *\/ $/;"	m	struct:_gqnode
color	../../include/realheap.h	/^  char *color;$/;"	m	struct:_realheap
contextCallback	../../demo/eucldist/eucldist.c	/^void CL_CALLBACK contextCallback ($/;"	f
contextCallback	../../demo/watershed/kernels/dijk.cpp	/^void CL_CALLBACK contextCallback ($/;"	f
contextCallback	../../demo/watershed/watershed.c	/^void CL_CALLBACK contextCallback ($/;"	f
contextCallback	../../demo/watershedNew/watershed.c	/^void CL_CALLBACK contextCallback ($/;"	f
cost	../../demo/diffwatershed/diffwatershed.c	/^  Image *cost;$/;"	m	struct:_ImageForest	file:
cost	../../include/realheap.h	/^  float *cost;$/;"	m	struct:_realheap
count	../../include/set.h	/^  int count;$/;"	m	struct:_intset
data	../../include/set.h	/^  char *data;$/;"	m	struct:_bmap
dens	../../include/subgraph.h	/^  float dens;    \/\/ probability density value$/;"	m	struct:_snode
df	../../include/subgraph.h	/^  float df;      \/\/ radius in the feature space for density computation$/;"	m	struct:_subgraph
dp	../../include/adjacency.h	/^  cl_int *dp;$/;"	m	struct:_adjpxl
dx	../../include/adjacency.h	/^  cl_int *dx;$/;"	m	struct:_adjrel
dy	../../include/adjacency.h	/^  cl_int *dy;$/;"	m	struct:_adjrel
elem	../../include/feature.h	/^  FElem *elem;$/;"	m	struct:_features
elem	../../include/gqueue.h	/^  GQNode *elem;  \/* all possible doubly-linked lists of the circular queue *\/$/;"	m	struct:_gdoublylinkedlists
elem	../../include/set.h	/^  int elem;$/;"	m	struct:_set
entropy	../../include/subgraph.h	/^  float entropy; \/\/ entropy of the pdf$/;"	m	struct:_subgraph
false	../../include/common.h	/^typedef enum boolean {false,true} bool;$/;"	e	enum:boolean
feat	../../include/feature.h	/^  float *feat;$/;"	m	struct:_felem
feat	../../include/subgraph.h	/^  float *feat;    \/\/ feature vector$/;"	m	struct:_snode
first	../../include/gqueue.h	/^  int  *first;   \/* list of the first elements of each doubly-linked list *\/$/;"	m	struct:_gcircularqueue
grafo	../../demo/watershed/kernels/dijk.cpp	/^class grafo {$/;"	c	file:
infoPlataforma	../../demo/watershed/kernels/dijk.cpp	/^void infoPlataforma (cl_platform_id * listaPlataformaID, cl_uint i) {$/;"	f
infoPlataforma	../../src/oclFunctions.c	/^void infoPlataforma (cl_platform_id * listaPlataformaID, cl_uint i) {$/;"	f
install_nx	../../demo/eucldist/nxsetup	/^install_nx()$/;"	f
label	../../demo/diffwatershed/diffwatershed.c	/^  Image *label;$/;"	m	struct:_ImageForest	file:
label	../../include/subgraph.h	/^  int   label;   \/\/ node label$/;"	m	struct:_snode
last	../../include/gqueue.h	/^  int  *last;    \/* list of the last  elements of each doubly-linked list  *\/$/;"	m	struct:_gcircularqueue
last	../../include/realheap.h	/^  int last;$/;"	m	struct:_realheap
log	../../demo/watershed/kernels/dijk.cpp	/^void log (vector < unsigned int > v, char *argv[]) {$/;"	f
main	../../demo/diffwatershed/diffwatershed.c	/^int main(int argc, char **argv)$/;"	f
main	../../demo/eucldist/eucldist.c	/^int main(int argc, char **argv)$/;"	f
main	../../demo/eucldist/serialEucldist.c	/^int main(int argc, char **argv)$/;"	f
main	../../demo/watergray/watergray.c	/^int main(int argc, char **argv)$/;"	f
main	../../demo/watershed/kernels/dijk.cpp	/^int main(int argc, char *argv[]) {$/;"	f
main	../../demo/watershed/watershed.c	/^cl_int main(cl_int argc, char **argv)$/;"	f
main	../../demo/watershedNew/watershed.c	/^int main(int argc, char **argv)$/;"	f
make_graph	../../demo/watershed/kernels/dijk.cpp	/^void grafo::make_graph(FILE *fp) {$/;"	f	class:grafo
make_graph558	../../demo/watershed/kernels/dijk.cpp	/^void grafo::make_graph558 ( FILE* fp, int* raiz ) {$/;"	f	class:grafo
make_graph9	../../demo/watershed/kernels/dijk.cpp	/^void grafo::make_graph9 ( FILE* fp ) {$/;"	f	class:grafo
maxdens	../../include/subgraph.h	/^  float maxdens; \/\/ maximum density value$/;"	m	struct:_subgraph
maxvalue	../../include/gqueue.h	/^  int  maxvalue;  \/* maximum value of a node in queue *\/$/;"	m	struct:_gcircularqueue
mindens	../../include/subgraph.h	/^  float mindens; \/\/ minimum density value$/;"	m	struct:_subgraph
minvalue	../../include/gqueue.h	/^  int  minvalue;  \/* minimum value of a node in queue *\/$/;"	m	struct:_gcircularqueue
n	../../include/adjacency.h	/^  cl_int n;$/;"	m	struct:_adjpxl
n	../../include/adjacency.h	/^  cl_int n;$/;"	m	struct:_adjrel
n	../../include/realheap.h	/^  int n;$/;"	m	struct:_realheap
n	../../include/set.h	/^  int n;$/;"	m	struct:_intset
nbuckets	../../include/gqueue.h	/^  int  nbuckets; \/* number of buckets in the circular queue *\/$/;"	m	struct:_gcircularqueue
ncols	../../include/dimage.h	/^  int ncols,nrows;$/;"	m	struct:_DImage
ncols	../../include/feature.h	/^  int  nrows,ncols;$/;"	m	struct:_features
ncols	../../include/image.h	/^  cl_int ncols,nrows;$/;"	m	struct:_image
nelems	../../include/feature.h	/^  int  nelems;$/;"	m	struct:_features
nelems	../../include/gqueue.h	/^  int nelems;  \/* total number of elements *\/$/;"	m	struct:_gdoublylinkedlists
next	../../include/gqueue.h	/^  int  next;  \/* next node *\/$/;"	m	struct:_gqnode
next	../../include/set.h	/^  struct _set *next;$/;"	m	struct:_set	typeref:struct:_set::_set
nextPow2	../../demo/watershed/kernels/dijk.cpp	/^cl_uint nextPow2 (int n) {$/;"	f
nfeats	../../include/feature.h	/^  int  nfeats;$/;"	m	struct:_features
nfeats	../../include/subgraph.h	/^  int   nfeats;  \/\/ number of features$/;"	m	struct:_subgraph
nlabels	../../include/subgraph.h	/^  int   nlabels; \/\/ number of clusters$/;"	m	struct:_subgraph
nnodes	../../include/subgraph.h	/^  int   nnodes;  \/\/ number of nodes$/;"	m	struct:_subgraph
node	../../include/subgraph.h	/^  SNode *node;   \/\/ nodes of the image\/scene subgraph$/;"	m	struct:_subgraph
nplatadj	../../include/subgraph.h	/^  int nplatadj; \/\/holds the amount of adjacent nodes on plateaus$/;"	m	struct:_snode
nrows	../../include/dimage.h	/^  int ncols,nrows;$/;"	m	struct:_DImage
nrows	../../include/feature.h	/^  int  nrows,ncols;$/;"	m	struct:_features
nrows	../../include/image.h	/^  cl_int ncols,nrows;$/;"	m	struct:_image
numV	../../demo/watershed/kernels/dijk.cpp	/^		int numV; 				\/\/ Numero de vertices$/;"	m	class:grafo	file:
nx_group_exists	../../demo/eucldist/nxsetup	/^nx_group_exists()$/;"	f
nx_user_exists	../../demo/eucldist/nxsetup	/^nx_user_exists()$/;"	f
ordered_list_of_nodes	../../include/subgraph.h	/^  int  *ordered_list_of_nodes; \/\/ Store the list of nodes in the increasing\/decreasing order of pathval for speeding up classification.$/;"	m	struct:_subgraph
parse_cmdline	../../demo/eucldist/nxsetup	/^parse_cmdline()$/;"	f
pathval	../../include/subgraph.h	/^  float pathval; \/\/ path value$/;"	m	struct:_snode
pesos	../../demo/watershed/kernels/dijk.cpp	/^		vector < cl_uint > pesos; 			\/\/ Vetor de pesos$/;"	m	class:grafo	file:
pixel	../../include/realheap.h	/^  int *pixel;$/;"	m	struct:_realheap
pixel	../../include/subgraph.h	/^  int pixel;  \/\/ pixel index in the image\/scene$/;"	m	struct:_snode
pos	../../include/realheap.h	/^  int *pos;$/;"	m	struct:_realheap
position	../../include/subgraph.h	/^  int position;  \/\/ index in the pre-computed distance matrix$/;"	m	struct:_snode
pred	../../demo/diffwatershed/diffwatershed.c	/^  Image *pred;$/;"	m	struct:_ImageForest	file:
pred	../../include/subgraph.h	/^  int   pred;    \/\/ predecessor node$/;"	m	struct:_snode
prepare	../../demo/watershed/kernels/dijk.cpp	/^void prepare (vector < cl_uint >& M, vector < cl_uint >& C, vector < cl_uint >& U,$/;"	f
prepareAllDataForDevice	../../src/oclFunctions.c	/^void prepareAllDataForDevice (  cl_int errNum,$/;"	f
prev	../../include/gqueue.h	/^  int  prev;  \/* prev node *\/$/;"	m	struct:_gqnode
printInfo	../../demo/watershed/kernels/dijk.cpp	/^void grafo::printInfo () {$/;"	f	class:grafo
propsize	../../include/set.h	/^  int    propsize;$/;"	m	struct:_intset
radius	../../include/subgraph.h	/^  float radius;  \/\/ maximum distance among the k-nearest neighbors in$/;"	m	struct:_snode
real	../../include/common.h	/^typedef float real;$/;"	t
relevant	../../include/subgraph.h	/^  char  relevant; \/\/0 - irrelevant, 1 - relevant$/;"	m	struct:_snode
removal_policy	../../include/gqueue.h	/^  char removal_policy; \/* 0 is MINVALUE and 1 is MAXVALUE *\/$/;"	m	struct:_gcircularqueue
removal_policy	../../include/realheap.h	/^  char removal_policy; \/* 0 is MINVALUE and 1 is MAXVALUE *\/$/;"	m	struct:_realheap
root	../../demo/diffwatershed/diffwatershed.c	/^  Image *root;$/;"	m	struct:_ImageForest	file:
root	../../include/subgraph.h	/^  int   root;    \/\/ root node$/;"	m	struct:_snode
run_nscd	../../demo/eucldist/nxsetup	/^run_nscd()$/;"	f
slgrow	../../include/set.h	/^  int slsize, slgrow;$/;"	m	struct:_intset
slsize	../../include/set.h	/^  int slsize, slgrow;$/;"	m	struct:_intset
sqrtreal	../../src/common.c	/^inline real sqrtreal(real x){$/;"	f
status	../../include/subgraph.h	/^  char  status;  \/\/ 0 - nothing, 1 - prototype$/;"	m	struct:_snode
tbrow	../../include/dimage.h	/^  int *tbrow;$/;"	m	struct:_DImage
tbrow	../../include/image.h	/^  cl_int *tbrow;$/;"	m	struct:_image
test_nx	../../demo/eucldist/nxsetup	/^test_nx()$/;"	f
tiebreak	../../include/gqueue.h	/^  char tiebreak; \/* 1 is LIFO, 0 is FIFO (default) *\/$/;"	m	struct:_gcircularqueue
timer	../../include/common.h	/^typedef struct timeval timer;$/;"	t	typeref:struct:timeval
true	../../include/common.h	/^typedef enum boolean {false,true} bool;$/;"	e	enum:boolean
truelabel	../../include/subgraph.h	/^  int truelabel; \/\/ true label if it is known$/;"	m	struct:_snode
uchar	../../include/common.h	/^typedef unsigned char uchar;$/;"	t
uint	../../include/common.h	/^typedef unsigned int uint;$/;"	t
uninstall_nx	../../demo/eucldist/nxsetup	/^uninstall_nx() $/;"	f
useradd_nx	../../demo/eucldist/nxsetup	/^useradd_nx()$/;"	f
ushort	../../include/common.h	/^typedef unsigned short ushort;$/;"	t
val	../../include/dimage.h	/^  double *val;$/;"	m	struct:_DImage
val	../../include/image.h	/^  cl_int *val;$/;"	m	struct:_image
value	../../include/gqueue.h	/^  int *value;   \/* the value of the nodes in the graph *\/$/;"	m	struct:_gdoublylinkedlists
vazio	../../demo/eucldist/eucldist.c	/^bool vazio (cl_int Mask[], cl_int n) {$/;"	f
vazio	../../demo/watershed/kernels/dijk.cpp	/^bool vazio (vector < unsigned int > M) {$/;"	f
vazio	../../demo/watershed/watershed.c	/^bool vazio (cl_int Mask[], cl_int n) {$/;"	f
vazio	../../demo/watershedNew/watershed.c	/^bool vazio (cl_int Mask[], cl_int n) {$/;"	f
vert	../../demo/watershed/kernels/dijk.cpp	/^		vector < cl_uint > vert; 			\/\/ Vetor de vertices$/;"	m	class:grafo	file:
x	../../include/image.h	/^  cl_int x,y;$/;"	m	struct:_pixel
y	../../include/image.h	/^  cl_int x,y;$/;"	m	struct:_pixel
