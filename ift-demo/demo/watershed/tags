!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accuracy	../../src/opf.c	/^float Accuracy(Subgraph *sg)$/;"	f
AddFrame	../../src/image.c	/^Image *AddFrame(Image *img, int sz, int value)$/;"	f
AdjPixels	../../src/adjacency.c	/^AdjPxl *AdjPixels(Image *img, AdjRel *A)$/;"	f
AdjRel2Image	../../src/adjacency.c	/^Image  *AdjRel2Image(AdjRel *A){$/;"	f
AllocCharArray	../../src/common.c	/^char *AllocCharArray(int n)$/;"	f
AllocDoubleArray	../../src/common.c	/^double *AllocDoubleArray(int n)$/;"	f
AllocFloatArray	../../src/common.c	/^float *AllocFloatArray(int n)$/;"	f
AllocIntArray	../../src/common.c	/^int *AllocIntArray(int n)$/;"	f
AllocRealArray	../../src/common.c	/^real  *AllocRealArray(int n){$/;"	f
AllocUCharArray	../../src/common.c	/^uchar *AllocUCharArray(int n)$/;"	f
AllocUIntArray	../../src/common.c	/^uint *AllocUIntArray(int n)$/;"	f
AllocUShortArray	../../src/common.c	/^ushort *AllocUShortArray(int n)$/;"	f
BMapCopy	../../src/set.c	/^void   BMapCopy(BMap *dest, BMap *src) {$/;"	f
BMapDestroy	../../src/set.c	/^void   BMapDestroy(BMap *b) {$/;"	f
BMapFill	../../src/set.c	/^void   BMapFill(BMap *b, int value) {$/;"	f
BMapGet	../../src/set.c	/^int    BMapGet(BMap *b, int n) {$/;"	f
BMapNew	../../src/set.c	/^BMap * BMapNew(int n) {$/;"	f
BMapSet	../../src/set.c	/^void BMapSet(BMap *b, int n, int value) {$/;"	f
BMapToggle	../../src/set.c	/^void   BMapToggle(BMap *b, int n) {$/;"	f
Box	../../src/adjacency.c	/^AdjRel *Box(int ncols, int nrows)$/;"	f
CTime	../../src/comptime.c	/^float CTime(timer *tic, timer *toc) \/* It computes the time difference *\/$/;"	f
Change	../../src/common.c	/^void Change(int *a, int *b){ \/* It changes content between a and b *\/$/;"	f
Circular	../../src/adjacency.c	/^AdjRel *Circular(float r)$/;"	f
CloneAdjRel	../../src/adjacency.c	/^AdjRel *CloneAdjRel(AdjRel *A){$/;"	f
CloneSet	../../src/set.c	/^Set *CloneSet(Set *S){$/;"	f
Close	../../src/morphology.c	/^Image *Close(Image *img, AdjRel *A)$/;"	f
CloseBasins	../../src/morphology.c	/^Image *CloseBasins(Image *img)$/;"	f
CloseHoles	../../src/morphology.c	/^Image *CloseHoles(Image *img)$/;"	f
CloseRec	../../src/morphology.c	/^Image *CloseRec(Image *I, AdjRel *A)$/;"	f
ComplAdj	../../src/adjacency.c	/^AdjRel *ComplAdj(AdjRel *A1, AdjRel *A2)$/;"	f
Convert2DisjointSets	../../src/set.c	/^void    Convert2DisjointSets(Set **S1,$/;"	f
ConvertDImage2Image	../../src/dimage.c	/^Image *ConvertDImage2Image(DImage *dimg){$/;"	f
CopyDImage	../../src/dimage.c	/^DImage *CopyDImage(DImage *dimg)$/;"	f
CopyFeatures	../../src/feature.c	/^Features* CopyFeatures(Features* feat)$/;"	f
CopyImage	../../src/image.c	/^Image  *CopyImage(Image *img)$/;"	f
CopySNode	../../src/subgraph.c	/^void CopySNode(SNode *dest, SNode *src, int nfeats){$/;"	f
CopySubgraph	../../src/subgraph.c	/^Subgraph *CopySubgraph(Subgraph *g){$/;"	f
CreateAdjRel	../../src/adjacency.c	/^AdjRel *CreateAdjRel(int n)$/;"	f
CreateCImage	../../src/cimage.c	/^CImage *CreateCImage(int ncols, int nrows)$/;"	f
CreateDImage	../../src/dimage.c	/^DImage *CreateDImage(int ncols, int nrows)$/;"	f
CreateFeatures	../../src/feature.c	/^Features* CreateFeatures(int ncols, int nrows, int nfeats)$/;"	f
CreateGQueue	../../src/gqueue.c	/^GQueue *CreateGQueue(int nbuckets, int nelems, int *value)$/;"	f
CreateImage	../../src/image.c	/^Image *CreateImage(int ncols, int nrows)$/;"	f
CreateRealHeap	../../src/realheap.c	/^RealHeap *CreateRealHeap(int n, float *cost) {$/;"	f
CreateSubgraph	../../src/subgraph.c	/^Subgraph *CreateSubgraph(int nnodes)$/;"	f
Cross	../../src/adjacency.c	/^AdjRel *Cross(int ncols, int nrows)$/;"	f
DImageThreshold	../../src/dimage.c	/^Image *DImageThreshold(DImage *img, double lower, double higher)$/;"	f
DestroyAdjPxl	../../src/adjacency.c	/^void DestroyAdjPxl(AdjPxl **N)$/;"	f
DestroyAdjRel	../../src/adjacency.c	/^void DestroyAdjRel(AdjRel **A)$/;"	f
DestroyCImage	../../src/cimage.c	/^void    DestroyCImage(CImage **cimg)$/;"	f
DestroyDImage	../../src/dimage.c	/^void DestroyDImage(DImage **dimg)$/;"	f
DestroyFeatures	../../src/feature.c	/^void DestroyFeatures(Features **f)$/;"	f
DestroyGQueue	../../src/gqueue.c	/^void DestroyGQueue(GQueue **Q)$/;"	f
DestroyImage	../../src/image.c	/^void DestroyImage(Image **img)$/;"	f
DestroyRealHeap	../../src/realheap.c	/^void DestroyRealHeap(RealHeap **H) {$/;"	f
DestroySet	../../src/set.c	/^void DestroySet(Set **S)$/;"	f
DestroySubgraph	../../src/subgraph.c	/^void DestroySubgraph(Subgraph **sg)$/;"	f
Dilate	../../src/morphology.c	/^Image *Dilate(Image *img, AdjRel *A)$/;"	f
DrawLabeledRegions	../../src/cimage.c	/^CImage *DrawLabeledRegions(Image *img, Image *label){$/;"	f
EmptyGQueue	../../src/gqueue.c	/^int EmptyGQueue(GQueue *Q)$/;"	f
Erode	../../src/morphology.c	/^Image *Erode(Image *img, AdjRel *A)$/;"	f
Error	../../src/common.c	/^void Error(char *msg,char *func){ \/* It prints error message and exits$/;"	f
EuclDist	../../src/opf.c	/^float EuclDist(float *f1, float *f2, int n)$/;"	f
EuclDistLog	../../src/opf.c	/^float EuclDistLog(float *f1, float *f2, int n)$/;"	f
FChange	../../src/common.c	/^void FChange(float *a, float *b){ \/* It changes content between floats a and b *\/$/;"	f
FastCircular	../../src/adjacency.c	/^AdjRel *FastCircular(float r){$/;"	f
FastClose	../../src/morphology.c	/^Image *FastClose(Image *I, float radius)$/;"	f
FastCloseRec	../../src/morphology.c	/^Image *FastCloseRec(Image *I, float radius)$/;"	f
FastDilate	../../src/morphology.c	/^Image *FastDilate(Image *I,Set **S, float radius)$/;"	f
FastErode	../../src/morphology.c	/^Image *FastErode(Image *I,Set **S, float radius)$/;"	f
FastOpen	../../src/morphology.c	/^Image *FastOpen(Image *I, float radius)$/;"	f
FastOpenRec	../../src/morphology.c	/^Image *FastOpenRec(Image *I, float radius)$/;"	f
FrameSize	../../src/adjacency.c	/^int FrameSize(AdjRel *A)$/;"	f
GaussCImageFeats	../../src/feature.c	/^Features *GaussCImageFeats(CImage *cimg, int nscales)$/;"	f
GaussImageFeats	../../src/feature.c	/^Features *GaussImageFeats(Image *img, int nscales)$/;"	f
GetSetSize	../../src/set.c	/^int  GetSetSize(Set *S){$/;"	f
GoDownRealHeap	../../src/realheap.c	/^void GoDownRealHeap(RealHeap *H, int i) {$/;"	f
GoUpRealHeap	../../src/realheap.c	/^void GoUpRealHeap(RealHeap *H, int i) {$/;"	f
GrowGQueue	../../src/gqueue.c	/^GQueue *GrowGQueue(GQueue **Q, int nbuckets)$/;"	f
Horizontal	../../src/adjacency.c	/^AdjRel *Horizontal(int r)$/;"	f
ImageBorder	../../src/morphology.c	/^Set *ImageBorder(Image *img)$/;"	f
InfRec	../../src/morphology.c	/^Image *InfRec(Image *img, Image *marker)$/;"	f
InfRecMI	../../src/morphology.c	/^Image *InfRecMI(Image *img, Set **S)$/;"	f
InsertGQueue	../../src/gqueue.c	/^void InsertGQueue(GQueue **Q, int elem)$/;"	f
InsertRealHeap	../../src/realheap.c	/^char InsertRealHeap(RealHeap *H, int pixel) {$/;"	f
InsertSet	../../src/set.c	/^void InsertSet(Set **S, int elem)$/;"	f
IntSetAddUniqueElementToSet	../../src/set.c	/^void IntSetAddUniqueElementToSet(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetBelongs	../../src/set.c	/^int  IntSetBelongs(IntSet *S, int elem) {$/;"	f
IntSetDestroy	../../src/set.c	/^void IntSetDestroy(IntSet *S) {$/;"	f
IntSetEmpty	../../src/set.c	/^int IntSetEmpty(IntSet *S) {$/;"	f
IntSetGetElemProp	../../src/set.c	/^int  IntSetGetElemProp(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetGrow	../../src/set.c	/^void IntSetGrow(IntSet *S) {$/;"	f
IntSetIntersection	../../src/set.c	/^void IntSetIntersection(IntSet *S, IntSet *T) {$/;"	f
IntSetMinus	../../src/set.c	/^void IntSetMinus(IntSet *S, IntSet *T) {$/;"	f
IntSetNew	../../src/set.c	/^IntSet * IntSetNew(int N, int propsize) {$/;"	f
IntSetNewCopy	../../src/set.c	/^IntSet * IntSetNewCopy(IntSet *S) {$/;"	f
IntSetR1	../../src/set.c	/^void IntSetR1(IntSet *S, int index) {$/;"	f
IntSetRemoveAll	../../src/set.c	/^void IntSetRemoveAll(IntSet *S) {$/;"	f
IntSetRemoveAny	../../src/set.c	/^int IntSetRemoveAny(IntSet *S, void *elemprop) {$/;"	f
IntSetRemoveElement	../../src/set.c	/^void IntSetRemoveElement(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetSetElemProp	../../src/set.c	/^int IntSetSetElemProp(IntSet *S, int elem, void *elemprop) {$/;"	f
IntSetShrink	../../src/set.c	/^void IntSetShrink(IntSet *S) {$/;"	f
IntSetUnion	../../src/set.c	/^void IntSetUnion(IntSet *S, IntSet *T) {$/;"	f
IntSetUnion1	../../src/set.c	/^void IntSetUnion1(IntSet *S, int elem, void *elemprop) {$/;"	f
IsEmptyRealHeap	../../src/realheap.c	/^char IsEmptyRealHeap(RealHeap *H) {$/;"	f
IsFullRealHeap	../../src/realheap.c	/^char IsFullRealHeap(RealHeap *H) {$/;"	f
IsInSet	../../src/set.c	/^bool IsInSet(Set *S, int elem){$/;"	f
IsPowerOf2	../../src/common.c	/^int IsPowerOf2(int x)$/;"	f
KAdjacency	../../src/adjacency.c	/^AdjRel *KAdjacency()$/;"	f
Lab2RGB	../../src/color.c	/^void Lab2RGB(float* l, float* a, float* b)$/;"	f
LabFeats	../../src/feature.c	/^Features* LabFeats(Features* rgb)$/;"	f
LeftSide	../../src/adjacency.c	/^AdjRel *LeftSide(AdjRel *A)$/;"	f
LeftSide2	../../src/adjacency.c	/^AdjRel *LeftSide2(AdjRel *A, float r)$/;"	f
MAX_SOURCE_SIZE	../../src/oclFunctions.c	2;"	d	file:
MSTPrototypes	../../src/opf.c	/^void MSTPrototypes(Subgraph *sg)$/;"	f
MaximumDImageValue	../../src/dimage.c	/^double  MaximumDImageValue(DImage *dimg)$/;"	f
MaximumSetValue	../../src/set.c	/^int     MaximumSetValue(Set *S){$/;"	f
MaximumValue	../../src/image.c	/^int MaximumValue(Image *img)$/;"	f
MergeSets	../../src/set.c	/^void MergeSets(Set **S, Set **T) {$/;"	f
MinimumDImageValue	../../src/dimage.c	/^double  MinimumDImageValue(DImage *dimg)$/;"	f
MinimumSetValue	../../src/set.c	/^int     MinimumSetValue(Set *S){$/;"	f
MinimumValue	../../src/image.c	/^int MinimumValue(Image *img)$/;"	f
NCFgets	../../src/common.c	/^int NCFgets(char *s, int m, FILE *f) {$/;"	f
OPFClassify	../../src/opf.c	/^void OPFClassify(Subgraph *sgtrain, Subgraph *sg)$/;"	f
OPFClassifyImage	../../src/opf.c	/^Image* OPFClassifyImage(Subgraph *sgtrain, Features* feat)$/;"	f
OPFLearning	../../src/opf.c	/^void OPFLearning(Subgraph **sgtrain, Subgraph **sgeval)$/;"	f
OPFTraining	../../src/opf.c	/^void OPFTraining(Subgraph *sg)$/;"	f
Open	../../src/morphology.c	/^Image *Open(Image *img, AdjRel *A)$/;"	f
OpenDomes	../../src/morphology.c	/^Image *OpenDomes(Image *img)$/;"	f
OpenRec	../../src/morphology.c	/^Image *OpenRec(Image *I, AdjRel *A)$/;"	f
RGB2Lab	../../src/color.c	/^void RGB2Lab(float* r, float* g, float * b)$/;"	f
RandomInteger	../../src/common.c	/^int RandomInteger (int low, int high){$/;"	f
ReadCImage	../../src/cimage.c	/^CImage *ReadCImage(char *filename)$/;"	f
ReadDImage	../../src/dimage.c	/^DImage  *ReadDImage(char *filename){$/;"	f
ReadImage	../../src/image.c	/^Image *ReadImage(char *filename)$/;"	f
ReadSeeds	../../src/seeds.c	/^void ReadSeeds(char *filename, Set **Obj, Set **Bkg)$/;"	f
ReadSubgraph	../../src/subgraph.c	/^Subgraph *ReadSubgraph(char *file){$/;"	f
RemFrame	../../src/image.c	/^Image *RemFrame(Image *fimg, int sz)$/;"	f
RemoveGQueue	../../src/gqueue.c	/^int RemoveGQueue(GQueue *Q)$/;"	f
RemoveGQueueElem	../../src/gqueue.c	/^void RemoveGQueueElem(GQueue *Q, int elem)$/;"	f
RemoveRealHeap	../../src/realheap.c	/^char RemoveRealHeap(RealHeap *H, int *pixel) {$/;"	f
RemoveSet	../../src/set.c	/^int RemoveSet(Set **S)$/;"	f
RemoveSetElem	../../src/set.c	/^void RemoveSetElem(Set **S, int elem){$/;"	f
ResetGQueue	../../src/gqueue.c	/^void ResetGQueue(GQueue *Q)$/;"	f
ResetRealHeap	../../src/realheap.c	/^void ResetRealHeap(RealHeap *H)$/;"	f
RightSide	../../src/adjacency.c	/^AdjRel *RightSide(AdjRel *A)$/;"	f
RightSide2	../../src/adjacency.c	/^AdjRel *RightSide2(AdjRel *A, float r)$/;"	f
Ring	../../src/adjacency.c	/^AdjRel *Ring(float inner_radius, float outer_radius)$/;"	f
SafeMod	../../src/common.c	/^int SafeMod(int a, int n)$/;"	f
SetDImage	../../src/dimage.c	/^void SetDImage(DImage *dimg, double value)$/;"	f
SetImage	../../src/image.c	/^void SetImage(Image *img, int value)$/;"	f
SetRemovalPolicyRealHeap	../../src/realheap.c	/^void SetRemovalPolicyRealHeap(RealHeap *H, char policy){$/;"	f
SetSubgraphFeatures	../../src/opf.c	/^void SetSubgraphFeatures(Subgraph *sg, Features *f)$/;"	f
ShearedBox	../../src/adjacency.c	/^AdjRel *ShearedBox(int xsize, int ysize, float Si, float Sj)$/;"	f
SplitSubgraph	../../src/opf.c	/^void SplitSubgraph(Subgraph *sg, Subgraph **sg1, Subgraph **sg2, float perc1)$/;"	f
SplitSubgraphByTrueLabel	../../src/opf.c	/^Subgraph* SplitSubgraphByTrueLabel(Subgraph* sg, int label)$/;"	f
SubgraphFromSeeds	../../src/opf.c	/^Subgraph* SubgraphFromSeeds(Features* f, Set* Si, Set* Se)$/;"	f
SupRec	../../src/morphology.c	/^Image *SupRec(Image *img, Image *marker)$/;"	f
SupRecMI	../../src/morphology.c	/^Image *SupRecMI(Image *img, Set **S)$/;"	f
SwapErrorsbyNonPrototypes	../../src/opf.c	/^void SwapErrorsbyNonPrototypes(Subgraph **sgtrain, Subgraph **sgeval)$/;"	f
SwapSNode	../../src/subgraph.c	/^void SwapSNode(SNode *a, SNode *b){$/;"	f
Threshold	../../src/image.c	/^Image *Threshold(Image *img, int lower, int higher)$/;"	f
Tic	../../src/comptime.c	/^timer *Tic(){ \/* It marks the initial time *\/$/;"	f
Toc	../../src/comptime.c	/^timer *Toc(){ \/* It marks the final time *\/$/;"	f
UpdateGQueue	../../src/gqueue.c	/^void UpdateGQueue(GQueue **Q, int elem, int newvalue)$/;"	f
UpdateRealHeap	../../src/realheap.c	/^void UpdateRealHeap(RealHeap *H, int p, float value){$/;"	f
ValidDImagePixel	../../src/dimage.c	/^bool ValidDImagePixel(DImage *dimg, int x, int y)$/;"	f
ValidPixel	../../src/image.c	/^bool ValidPixel(Image *img, int x, int y)$/;"	f
Vertical	../../src/adjacency.c	/^AdjRel *Vertical(int r)$/;"	f
Warning	../../src/common.c	/^void Warning(char *msg,char *func){ \/* It prints warning message and$/;"	f
Watershed	watershed.c	/^Image *Watershed(Image *img, Set *Obj, Set *Bkg)$/;"	f
WriteCImage	../../src/cimage.c	/^void    WriteCImage(CImage *cimg, char *filename)$/;"	f
WriteDImage	../../src/dimage.c	/^void    WriteDImage(DImage *dimg, char *filename){$/;"	f
WriteImage	../../src/image.c	/^void WriteImage(Image *img,char *filename)$/;"	f
WriteSubgraph	../../src/subgraph.c	/^void WriteSubgraph(Subgraph *g, char *file){$/;"	f
_fast_Belongs	../../src/set.c	437;"	d	file:
bmap_reset	../../src/set.c	/^static char bmap_reset[8] = { 0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f };$/;"	v	file:
bmap_set	../../src/set.c	/^static char bmap_set[8]   = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };$/;"	v	file:
checkErr	../../src/oclFunctions.c	/^inline void checkErr(cl_int err, const char *name) {$/;"	f
contextCallback	../../src/oclFunctions.c	/^void CL_CALLBACK contextCallback ($/;"	f
infoPlataforma	../../src/oclFunctions.c	/^void infoPlataforma (cl_platform_id * listaPlataformaID, cl_uint i) {$/;"	f
main	watershed.c	/^int main(int argc, char **argv)$/;"	f
prepareAllDataForDevice	../../src/oclFunctions.c	/^void prepareAllDataForDevice (  cl_int errNum,$/;"	f
sqrtreal	../../src/common.c	/^inline real sqrtreal(real x){$/;"	f
vazio	watershed.c	/^bool vazio (unsigned int M[], int n) {$/;"	f
